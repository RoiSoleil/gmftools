/*
* generated by Xtext
*/
package org.xtext.cg2009.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.cg2009.services.EntitiesGrammarAccess;

public class EntitiesParser extends AbstractContentAssistParser {
	
	@Inject
	private EntitiesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.cg2009.contentassist.antlr.internal.InternalEntitiesLexer createLexer(CharStream stream) {
		return new org.xtext.cg2009.contentassist.antlr.internal.InternalEntitiesLexer(stream);
	}
	
	@Override
	protected org.xtext.cg2009.contentassist.antlr.internal.InternalEntitiesParser createParser() {
		org.xtext.cg2009.contentassist.antlr.internal.InternalEntitiesParser result = new org.xtext.cg2009.contentassist.antlr.internal.InternalEntitiesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getSimplePropertyAccess().getTypeAlternatives_3_0(), "rule__SimpleProperty__TypeAlternatives_3_0");
					put(grammarAccess.getReferencePropertyAccess().getAlternatives_2(), "rule__ReferenceProperty__Alternatives_2");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getSimplePropertyAccess().getGroup(), "rule__SimpleProperty__Group__0");
					put(grammarAccess.getReferencePropertyAccess().getGroup(), "rule__ReferenceProperty__Group__0");
					put(grammarAccess.getModelAccess().getEntitiesAssignment_1(), "rule__Model__EntitiesAssignment_1");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1(), "rule__Entity__SuperTypeAssignment_2_1");
					put(grammarAccess.getEntityAccess().getPropertiesAssignment_4(), "rule__Entity__PropertiesAssignment_4");
					put(grammarAccess.getSimplePropertyAccess().getNameAssignment_1(), "rule__SimpleProperty__NameAssignment_1");
					put(grammarAccess.getSimplePropertyAccess().getTypeAssignment_3(), "rule__SimpleProperty__TypeAssignment_3");
					put(grammarAccess.getReferencePropertyAccess().getNameAssignment_0(), "rule__ReferenceProperty__NameAssignment_0");
					put(grammarAccess.getReferencePropertyAccess().getManyAssignment_2_1(), "rule__ReferenceProperty__ManyAssignment_2_1");
					put(grammarAccess.getReferencePropertyAccess().getTypeAssignment_3(), "rule__ReferenceProperty__TypeAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.cg2009.contentassist.antlr.internal.InternalEntitiesParser typedParser = (org.xtext.cg2009.contentassist.antlr.internal.InternalEntitiesParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EntitiesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EntitiesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
